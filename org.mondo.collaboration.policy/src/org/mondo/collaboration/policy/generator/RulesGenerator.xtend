/*
 * generated by Xtext 2.10.0
 */
package org.mondo.collaboration.policy.generator

import java.util.ArrayList
import java.util.List
import java.util.TreeSet
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.viatra.query.patternlanguage.patternLanguage.Variable
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.mondo.collaboration.policy.rules.AccessibilityLevel
import org.mondo.collaboration.policy.rules.AttributeFact
import org.mondo.collaboration.policy.rules.Binding
import org.mondo.collaboration.policy.rules.Group
import org.mondo.collaboration.policy.rules.Model
import org.mondo.collaboration.policy.rules.ObjectFact
import org.mondo.collaboration.policy.rules.OperationType
import org.mondo.collaboration.policy.rules.Policy
import org.mondo.collaboration.policy.rules.ReferenceFact
import org.mondo.collaboration.policy.rules.ResolutionType
import org.mondo.collaboration.policy.rules.Role
import org.mondo.collaboration.policy.rules.Rule
import org.mondo.collaboration.policy.rules.User

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RulesGenerator extends AbstractGenerator {
	var List<Rule> explicitRulesObjectAllow = new ArrayList<Rule>();
    var List<Rule> explicitRulesObjectDeny = new ArrayList<Rule>();
	var List<Rule> explicitRulesAttributeAllow = new ArrayList<Rule>();
	var List<Rule> explicitRulesAttributeDeny = new ArrayList<Rule>();
	var List<Rule> explicitRulesReferenceAllow = new ArrayList<Rule>();
	var List<Rule> explicitRulesReferenceDeny = new ArrayList<Rule>();

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		if(resource.contents.head instanceof Model) {
			val model = resource.contents.head as Model;
		    val priorities = model.priorities;
		    model.fillListsFromRules;
		    fsa.generateFile("helper_patterns.vql", generateHelperPatterns(model));
		    fsa.generateFile("object_patterns.vql", generateObjectPatterns(model, priorities));
		    fsa.generateFile("attribute_patterns.vql", generateAttributePatterns(model, priorities));
		    fsa.generateFile("reference_patterns.vql", generateReferencePatterns(model, priorities));
		} else if(resource.contents.head instanceof EPackage) {
			val metamodel = resource.contents.head as EPackage
			fsa.generateFile(metamodel.name+"_gen.vql", generateMetaModelPattern(metamodel));
		} else {
			val root = resource.contents.head as EObject
			val metamodel = root.eClass.EPackage as EPackage
			fsa.generateFile(metamodel.name+"_gen.vql", generateMetaModelPattern(metamodel));
		}
	}
	
	def fillListsFromRules(Model model) {
		val rules = model.policy.rules;
		explicitRulesObjectAllow = rules.filter[ rule | rule.asset instanceof ObjectFact && rule.access == AccessibilityLevel.ALLOW].toList;
		explicitRulesObjectDeny = rules.filter[ rule | rule.asset instanceof ObjectFact && rule.access == AccessibilityLevel.DENY].toList;
		explicitRulesAttributeAllow = rules.filter[ rule | rule.asset instanceof AttributeFact && rule.access == AccessibilityLevel.ALLOW].toList;
		explicitRulesAttributeDeny = rules.filter[ rule | rule.asset instanceof AttributeFact && rule.access == AccessibilityLevel.DENY].toList;
		explicitRulesReferenceAllow = rules.filter[ rule | rule.asset instanceof ReferenceFact && rule.access == AccessibilityLevel.ALLOW].toList;
		explicitRulesReferenceDeny = rules.filter[ rule | rule.asset instanceof ReferenceFact && rule.access == AccessibilityLevel.DENY].toList;
	}
	
	def generateImport() '''
    package org.mondo.collaboration.security.increment.policy

    import "http://www.eclipse.org/emf/2002/Ecore"
    import "http://www.mondo.org/collaboration/policy/Rules"
    import "http://WTSpec4M/5.0M"
    '''	

    def generateObjectPatterns(Model model, TreeSet<Integer> priorities) '''
    «generateImport»
    
    «generateExplicitJudgement_object(model)»
    
    «generateEffectiveJudgement_object(model, priorities)»
    
    «generateDominationByPriority_object(priorities)»
    
    «generateDominationByAccess_object(model, priorities)»
    
    «generateJudgement_object(priorities)»
    
    «generateStrongConsequenceJudgement_object(priorities)»
    
    '''
    
    def generateAttributePatterns(Model model, TreeSet<Integer> priorities) '''
    «generateImport»
    
    «generateExplicitJudgement_attribute(model)»
    
    «generateEffectiveJudgement_attribute(model, priorities)»
    
    «generateDominationByPriority_attribute(priorities)»
        
    «generateDominationByAccess_attribute(model, priorities)»
    
    «generateJudgement_attribute(priorities)»
    
    «generateStrongConsequenceJudgement_attribute(priorities)»
    
    «generateWeakConsequenceJudgement_attribute(priorities)»
    '''
    
    def generateReferencePatterns(Model model, TreeSet<Integer> priorities) '''
    «generateImport»
    
    «generateExplicitJudgement_reference(model)»
    
    «generateEffectiveJudgement_reference(model, priorities)»
    
    «generateDominationByPriority_reference(priorities)»
        
    «generateDominationByAccess_reference(model, priorities)»
    
    «generateJudgement_reference(priorities)»
    
    «generateStrongConsequenceJudgement_reference(priorities)»
    
    «generateWeakConsequenceJudgement_reference(priorities)»
    '''
    
    
    def generateExplicitJudgement_object(Model model) '''
    «IF !explicitRulesObjectAllow.empty || model.policy.access == AccessibilityLevel.ALLOW»
    «generateExplicitJudgement_object_allow(model)»
    «ENDIF»
    
    «IF !explicitRulesObjectDeny.empty || model.policy.access == AccessibilityLevel.DENY»
    «generateExplicitJudgement_object_deny(model)»
    «ENDIF»
    '''
    
    def generateExplicitJudgement_object_allow(Model model) '''
    pattern explicitJudgement_object_allow(user : java String, object : EObject, operation, priority : java Integer)
    {
    «FOR rule : explicitRulesObjectAllow SEPARATOR "\n} or {"»
        «rule.generateRule_object»
    «ENDFOR»
    «IF model.policy.access == AccessibilityLevel.ALLOW»
        «IF !explicitRulesObjectAllow.empty»
            } or {
        «ENDIF»
        «model.policy.generateDefaultRule_object»
    «ENDIF»
    }
    '''
    
    def generateExplicitJudgement_object_deny(Model model) '''
    pattern explicitJudgement_object_deny(user : java String, object : EObject, operation, priority : java Integer)
    {
    «FOR rule : explicitRulesObjectDeny SEPARATOR "\n} or {"»
        «rule.generateRule_object»
    «ENDFOR»
    «IF model.policy.access == AccessibilityLevel.DENY»
        «IF !explicitRulesObjectDeny.empty»
            } or {
        «ENDIF»
        «model.policy.generateDefaultRule_object»
    «ENDIF»
    }
    '''
    
    def generateRule_object(Rule rule) '''
    //  rule «rule.name»
        find «rule.name»Asset(object);
        find «rule.name»User(user);
        «rule.operation.generateOperationType»
        priority == «rule.priority»;
    '''

    def generateDefaultRule_object(Policy policy) '''
    //  rule default
        find objectAsset(object);
        find allUsers(user);
        «policy.operation.generateOperationType»
        priority == eval(-1);
    '''
    
    
    def generateExplicitJudgement_attribute(Model model) '''
    «IF !explicitRulesAttributeAllow.empty || model.policy.access == AccessibilityLevel.ALLOW»
    «generateExplicitJudgement_attribute_allow(model)»
    «ENDIF»
    «IF !explicitRulesAttributeDeny.empty || model.policy.access == AccessibilityLevel.DENY»
    «generateExplicitJudgement_attribute_deny(model)»
    «ENDIF»
    '''
    
    def generateExplicitJudgement_attribute_allow(Model model) '''
    pattern explicitJudgement_attribute_allow(user : java String, source : EObject, value: java Object, attribute : EAttribute, operation, priority: java Integer)
    {
    «FOR rule : explicitRulesAttributeAllow SEPARATOR "\n} or {"»
        «rule.generateRule_attribute»
    «ENDFOR»
    «IF model.policy.access == AccessibilityLevel.ALLOW»
        «IF !explicitRulesAttributeAllow.empty»
            } or {
        «ENDIF»
        «model.policy.generateDefaultRule_attribute»
    «ENDIF»
    }    
    '''
    
    def generateExplicitJudgement_attribute_deny(Model model) '''
    pattern explicitJudgement_attribute_deny(user : java String, source : EObject, value: java Object, attribute : EAttribute, operation, priority: java Integer)
    {
    «FOR rule : explicitRulesAttributeDeny SEPARATOR "\n} or {"»
        «rule.generateRule_attribute»
    «ENDFOR»
    «IF model.policy.access == AccessibilityLevel.DENY»
       «IF !explicitRulesAttributeDeny.empty»
            } or {
       «ENDIF»
       «model.policy.generateDefaultRule_attribute»
    «ENDIF»
    }
    '''
    
    def generateRule_attribute(Rule rule) '''
    //  rule «rule.name»
        find «rule.name»Asset(source, value, attribute);
        find «rule.name»User(user);
        «rule.operation.generateOperationType»
        priority == «rule.priority»;
    '''

    def generateDefaultRule_attribute(Policy policy) '''
    //  rule default
        find attributeAsset(source, value, attribute);
        find allUsers(user);
        «policy.operation.generateOperationType»
        priority == eval(-1);
    '''
    
    
    def generateExplicitJudgement_reference(Model model) '''
    «IF !explicitRulesReferenceAllow.empty || model.policy.access == AccessibilityLevel.ALLOW»
    «generateExplicitJudgement_reference_allow(model)»
    «ENDIF»
    «IF !explicitRulesReferenceDeny.empty || model.policy.access == AccessibilityLevel.DENY»    
    «generateExplicitJudgement_reference_deny(model)»
    «ENDIF»
    '''
    
    def generateExplicitJudgement_reference_allow(Model model) '''
    pattern explicitJudgement_reference_allow(user : java String, source : EObject, target : EObject, reference : EReference, operation, priority: java Integer)
    {
    «FOR rule : explicitRulesReferenceAllow SEPARATOR "\n} or {"»
        «rule.generateRule_reference»
    «ENDFOR»
    «IF model.policy.access == AccessibilityLevel.ALLOW»
        «IF !explicitRulesReferenceAllow.empty»
            } or {
        «ENDIF»
        «model.policy.generateDefaultRule_reference»
    «ENDIF»
    }
    '''
    
    def generateExplicitJudgement_reference_deny(Model model) '''
    pattern explicitJudgement_reference_deny(user : java String, source : EObject, target : EObject, reference : EReference, operation, priority: java Integer)
    {
    «FOR rule : explicitRulesReferenceDeny SEPARATOR "\n} or {"»
        «rule.generateRule_reference»
    «ENDFOR»
    «IF model.policy.access == AccessibilityLevel.DENY»
       «IF !explicitRulesReferenceDeny.empty»
           } or {
       «ENDIF»
       «model.policy.generateDefaultRule_reference»
    «ENDIF»
    }    
    '''
    
    def generateRule_reference(Rule rule) '''
    //  rule «rule.name»
        find «rule.name»Asset(source, target, reference);
        find «rule.name»User(user);
        «rule.operation.generateOperationType»
        priority == «rule.priority»;
    '''

    def generateDefaultRule_reference(Policy policy) '''
    //  rule default
        find referenceAsset(source, target, reference);
        find allUsers(user);
        «policy.operation.generateOperationType»
        priority == eval(-1);
    '''
    
    
    def generateEffectiveJudgement_object(Model model, TreeSet<Integer> priorities) '''
    pattern effectiveJudgement_object(user: java String, object: EObject, priority: java Integer, operation, access)
    {
        find effectiveJudgement_object_default(user, object, operation, access);
        priority == eval(-1);
    } or {
        find effectiveJudgement_object_weak(user, object, operation, access);
        priority == 0;
    } or {
        «FOR prio: priorities SEPARATOR "\n} or {"»
           find effectiveJudgement_object_«prio»(user, object, operation, access);
           priority == «prio»;
        «ENDFOR»
    }
        
    «generateEffectiveJudgement_object_default(model)»
    
    «model.generateEffectiveJudgement_object_weak»
    
    «generateEffectiveJudgement_object_priority(model, priorities)»    
    '''
    
    def generateEffectiveJudgement_object_default(Model model) '''
    pattern effectiveJudgement_object_default(user: java String, object: EObject, operation, access)
    {
    	«IF model.policy.access == AccessibilityLevel.ALLOW»
    	    find explicitJudgement_object_allow(user, object, operation, eval(-1));
    	    access == AccessibilityLevel::ALLOW;
    	«ENDIF»
        «IF model.policy.access == AccessibilityLevel.DENY»
        find explicitJudgement_object_deny(user, object, operation, eval(-1));
            access == AccessibilityLevel::DENY;
        «ENDIF»
        neg find dominationByPriority_object_default(user, object, operation);
    }
    '''
    
    def generateEffectiveJudgement_object_weak(Model model) '''
    pattern effectiveJudgement_object_weak(user: java String, object: EObject, operation, access)
    {
    	find effectiveJudgement_object_weak_allow(user, object, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_object_weak_deny(user, object, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    «generateEffectiveJudgement_object_weak_allow(model)»
    
    «generateEffectiveJudgement_object_weak_deny(model)»
    '''
    
    def generateEffectiveJudgement_object_weak_allow(Model model) '''
    pattern effectiveJudgement_object_weak_allow(user: java String, object: EObject, operation)
    {
    	find judgement_object_weak_allow(user, object, operation);
        neg find dominationByPriority_object_weak(user, object, operation);
        «IF model.policy.resolution != ResolutionType.PERMISSIVE»
            neg find dominationByAccess_object_weak(user, object, operation);
        «ENDIF»
    }
    '''
    
    def generateEffectiveJudgement_object_weak_deny(Model model) '''
    pattern effectiveJudgement_object_weak_deny(user: java String, object: EObject, operation)
    {
        find judgement_object_weak_deny(user, object, operation);
        neg find dominationByPriority_object_weak(user, object, operation);
        «IF model.policy.resolution != ResolutionType.RESTRICTIVE»
            neg find dominationByAccess_object_weak(user, object, operation);
        «ENDIF»
    }
    '''
    
    def generateEffectiveJudgement_object_priority(Model model, TreeSet<Integer> priorities) '''
    «FOR prio: priorities»
    pattern effectiveJudgement_object_«prio»(user: java String, object: EObject, operation, access)
    {
    	find effectiveJudgement_object_«prio»_allow(user, object, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_object_«prio»_deny(user, object, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    «generateEffectiveJudgement_object_priority_allow(model, priorities, prio)»
            
    «generateEffectiveJudgement_object_priority_deny(model, priorities, prio)»
    «ENDFOR»
    '''
    
    def generateEffectiveJudgement_object_priority_allow(Model model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_object_«prio»_allow(user: java String, object: EObject, operation)
    {
        find judgement_object_«prio»_allow(user, object, operation);
        «IF prio != priorities.max»
            neg find dominationByPriority_object_«prio»(user, object, operation);
        «ENDIF»
        «IF model.policy.resolution != ResolutionType.PERMISSIVE»
            neg find dominationByAccess_object_«prio»(user, object, operation);
        «ENDIF»
    }
    '''
    
    def generateEffectiveJudgement_object_priority_deny(Model model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_object_«prio»_deny(user: java String, object: EObject, operation)
    {
        find judgement_object_«prio»_deny(user, object, operation);
        «IF prio != priorities.max»
            neg find dominationByPriority_object_«prio»(user, object, operation);
        «ENDIF»
        «IF model.policy.resolution != ResolutionType.RESTRICTIVE»
            neg find dominationByAccess_object_«prio»(user, object, operation);
        «ENDIF»
    }
    '''
    
    
    def generateEffectiveJudgement_attribute(Model model, TreeSet<Integer> priorities) '''
    pattern effectiveJudgement_attribute(user: java String, source: EObject, value: java Object, attribute: EAttribute, priority: java Integer, operation, access)
    {
       find effectiveJudgement_attribute_default(user, source, value, attribute, operation, access);
       priority == eval(-1);
    } or {
       find effectiveJudgement_attribute_weak(user, source, value, attribute, operation, access);
       priority == 0;
    } or {
        «FOR prio: priorities SEPARATOR "\n} or {"»
           find effectiveJudgement_attribute_«prio»(user, source, value, attribute, operation, access);
           priority == «prio»;
        «ENDFOR»
    }
        
    «generateEffectiveJudgement_attribute_default(model)»
    
    «generateEffectiveJudgement_attribute_weak(model)»
    
    «generateEffectiveJudgement_attribute_priority(model, priorities)»    
    '''
    
    def generateEffectiveJudgement_attribute_default(Model model) '''
    pattern effectiveJudgement_attribute_default(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation, access)
    {
    	«IF model.policy.access == AccessibilityLevel.ALLOW»
    	    find explicitJudgement_attribute_allow(user, source, value, attribute, operation, eval(-1));
    	    access == AccessibilityLevel::ALLOW;
    	«ENDIF»
    	«IF model.policy.access == AccessibilityLevel.DENY»
    	    find explicitJudgement_attribute_deny(user, source, value, attribute, operation, eval(-1));
    	    access == AccessibilityLevel::DENY;
    	«ENDIF»
    	neg find dominationByPriority_attribute_default(user, source, value, attribute, operation);
    }
    '''
    
    def generateEffectiveJudgement_attribute_weak(Model model) '''
    pattern effectiveJudgement_attribute_weak(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation, access)
    {
    	find effectiveJudgement_attribute_weak_allow(user, source, value, attribute, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_attribute_weak_deny(user, source, value, attribute, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    «generateEffectiveJudgement_attribute_weak_allow(model)»
    
    «generateEffectiveJudgement_attribute_weak_deny(model)»
    '''
    
    def generateEffectiveJudgement_attribute_weak_allow(Model model) '''
    pattern effectiveJudgement_attribute_weak_allow(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
    	find judgement_attribute_weak_allow(user, source, value, attribute, operation);
        neg find dominationByPriority_attribute_weak(user, source, value, attribute, operation);
        «IF model.policy.resolution != ResolutionType.PERMISSIVE»
            neg find dominationByAccess_attribute_weak(user, source, value, attribute, operation);
        «ENDIF»
    }
    '''
    
    def generateEffectiveJudgement_attribute_weak_deny(Model model) '''
    pattern effectiveJudgement_attribute_weak_deny(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        find judgement_attribute_weak_deny(user, source, value, attribute, operation);
        neg find dominationByPriority_attribute_weak(user, source, value, attribute, operation);
        «IF model.policy.resolution != ResolutionType.RESTRICTIVE»
            neg find dominationByAccess_attribute_weak(user, source, value, attribute, operation);
        «ENDIF»
    }
    '''
    
    def generateEffectiveJudgement_attribute_priority(Model model, TreeSet<Integer> priorities) '''
    «FOR prio: priorities»
    pattern effectiveJudgement_attribute_«prio»(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation, access)
    {
    	find effectiveJudgement_attribute_«prio»_allow(user, source, value, attribute, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_attribute_«prio»_deny(user, source, value, attribute, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    «generateEffectiveJudgement_attribute_priority_allow(model, priorities, prio)»
            
    «generateEffectiveJudgement_attribute_priority_deny(model, priorities, prio)»
    «ENDFOR»
    '''
    
    def generateEffectiveJudgement_attribute_priority_allow(Model model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_attribute_«prio»_allow(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        find judgement_attribute_«prio»_allow(user, source, value, attribute, operation);
        «IF prio != priorities.max»
            neg find dominationByPriority_attribute_«prio»(user, source, value, attribute, operation);
        «ENDIF»
        «IF model.policy.resolution != ResolutionType.PERMISSIVE»
            neg find dominationByAccess_attribute_«prio»(user, source, value, attribute, operation);
        «ENDIF»
    }
    '''
    
    def generateEffectiveJudgement_attribute_priority_deny(Model model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_attribute_«prio»_deny(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        find judgement_attribute_«prio»_deny(user, source, value, attribute, operation);
        «IF prio != priorities.max»
            neg find dominationByPriority_attribute_«prio»(user, source, value, attribute, operation);
        «ENDIF»
        «IF model.policy.resolution != ResolutionType.RESTRICTIVE»
            neg find dominationByAccess_attribute_«prio»(user, source, value, attribute, operation);
        «ENDIF»
    }
    '''
    
    
    def generateEffectiveJudgement_reference(Model model, TreeSet<Integer> priorities) '''
    pattern effectiveJudgement_reference(user: java String, source: EObject, target: EObject, reference:EReference, priority: java Integer, operation, access)
    {
       find effectiveJudgement_reference_default(user, source, target, reference, operation, access);
       priority == eval(-1);
    } or {
       find effectiveJudgement_reference_weak(user, source, target, reference, operation, access);
       priority == 0;
    } or {
        «FOR prio: priorities SEPARATOR "\n} or {"»
           find effectiveJudgement_reference_«prio»(user, source, target, reference, operation, access);
           priority == «prio»;
        «ENDFOR»
    }
        
    «generateEffectiveJudgement_reference_default(model)»
    
    «generateEffectiveJudgement_reference_weak(model)»
    
    «generateEffectiveJudgement_reference_priority(model, priorities)»    
    '''
    
    def generateEffectiveJudgement_reference_default(Model model) '''
    pattern effectiveJudgement_reference_default(user: java String, source: EObject, target: EObject, reference:EReference, operation, access)
    {
        «IF model.policy.access == AccessibilityLevel.ALLOW»
            find explicitJudgement_reference_allow(user, source, target, reference, operation, eval(-1));
            access == AccessibilityLevel::ALLOW;
        «ENDIF»
        «IF model.policy.access == AccessibilityLevel.DENY»
            find explicitJudgement_reference_deny(user, source, target, reference, operation, eval(-1));
            access == AccessibilityLevel::DENY;
        «ENDIF»
        neg find dominationByPriority_reference_default(user, source, target, reference, operation);
    }
    '''
    
    def generateEffectiveJudgement_reference_weak(Model model) '''
    pattern effectiveJudgement_reference_weak(user: java String, source: EObject, target: EObject, reference:EReference, operation, access)
    {
    	find effectiveJudgement_reference_weak_allow(user, source, target, reference, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_reference_weak_deny(user, source, target, reference, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    «model.generateEffectiveJudgement_reference_weak_allow»
    
    «model.generateEffectiveJudgement_reference_weak_deny»
    '''
    
    def generateEffectiveJudgement_reference_weak_allow(Model model) '''
    pattern effectiveJudgement_reference_weak_allow(user: java String, source: EObject, target: EObject, reference:EReference, operation)
    {
    	find judgement_reference_weak_allow(user, source, target, reference, operation);
        neg find dominationByPriority_reference_weak(user, source, target, reference, operation);
        «IF model.policy.resolution != ResolutionType.PERMISSIVE»
            neg find dominationByAccess_reference_weak(user, source, target, reference, operation);
        «ENDIF»
    }
    '''
    
    def generateEffectiveJudgement_reference_weak_deny(Model model) '''
    pattern effectiveJudgement_reference_weak_deny(user: java String, source: EObject, target: EObject, reference:EReference, operation)
    {
        find judgement_reference_weak_deny(user, source, target, reference, operation);
        neg find dominationByPriority_reference_weak(user, source, target, reference, operation);
        «IF model.policy.resolution != ResolutionType.RESTRICTIVE»
            neg find dominationByAccess_reference_weak(user, source, target, reference, operation);
        «ENDIF»
    }
    '''
    
    def generateEffectiveJudgement_reference_priority(Model model, TreeSet<Integer> priorities) '''
    «FOR prio: priorities»
    pattern effectiveJudgement_reference_«prio»(user: java String, source: EObject, target: EObject, reference:EReference, operation, access)
    {
    	find effectiveJudgement_reference_«prio»_allow(user, source, target, reference, operation);
    	access == AccessibilityLevel::ALLOW;
    } or {
    	find effectiveJudgement_reference_«prio»_deny(user, source, target, reference, operation);
    	access == AccessibilityLevel::DENY;
    }
    
    «generateEffectiveJudgement_reference_priority_allow(model, priorities, prio)»
            
    «generateEffectiveJudgement_reference_priority_deny(model, priorities, prio)»
    «ENDFOR»
    '''
    
    def generateEffectiveJudgement_reference_priority_allow(Model model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_reference_«prio»_allow(user: java String, source: EObject, target: EObject, reference:EReference, operation)
    {
        find judgement_reference_«prio»_allow(user, source, target, reference, operation);
        «IF prio != priorities.max»
            neg find dominationByPriority_reference_«prio»(user, source, target, reference, operation);
        «ENDIF»
        «IF model.policy.resolution != ResolutionType.PERMISSIVE»
            neg find dominationByAccess_reference_«prio»(user, source, target, reference, operation);
        «ENDIF»
    }
    '''
    
    def generateEffectiveJudgement_reference_priority_deny(Model model, TreeSet<Integer> priorities, Integer prio) '''
    pattern effectiveJudgement_reference_«prio»_deny(user: java String, source: EObject, target: EObject, reference:EReference, operation)
    {
        find judgement_reference_«prio»_deny(user, source, target, reference, operation);
        «IF prio != priorities.max»
            neg find dominationByPriority_reference_«prio»(user, source, target, reference, operation);
        «ENDIF»
        «IF model.policy.resolution != ResolutionType.RESTRICTIVE»
            neg find dominationByAccess_reference_«prio»(user, source, target, reference, operation);
        «ENDIF»
    }
    '''
    
    
    def generateDominationByPriority_object(TreeSet<Integer> priorities) '''
    «generateDominationByPriority_object_default(priorities)»
    
    «generateDominationByPriority_object_weak(priorities)»
    
    «generateDominationByPriority_object_priority(priorities)»
    '''
    
    def generateDominationByPriority_object_default(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_object_default(user: java String, object: EObject, operation)
    {
        find effectiveJudgement_object_weak(user, object, operation, _access);
    } or {
        «FOR prio: priorities SEPARATOR "\n} or {" »
            find effectiveJudgement_object_«prio»(user, object, operation, _access);
        «ENDFOR»
    }
    '''
    
    def generateDominationByPriority_object_weak(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_object_weak(user: java String, object: EObject, operation)
    {
        «FOR prio: priorities SEPARATOR "\n} or {" »
            find effectiveJudgement_object_«prio»(user, object, operation, _access);
        «ENDFOR»
    }
    '''
    
    def generateDominationByPriority_object_priority(TreeSet<Integer> priorities) '''
    «FOR prio: priorities»«IF prio != priorities.maxBy[it]»
    pattern dominationByPriority_object_«prio»(user: java String, object: EObject, operation) 
    {
        «FOR prevailingPrio: priorities.filter[it > prio] SEPARATOR "\n} or {" »
        find effectiveJudgement_object_«prevailingPrio»(user, object, operation, _access);
        «ENDFOR»
    } 
    «ENDIF»«ENDFOR»
    '''
    
    
    def generateDominationByPriority_attribute(TreeSet<Integer> priorities) '''
    «generateDominationByPriority_attribute_default(priorities)»
    
    «generateDominationByPriority_attribute_weak(priorities)»
    
    «generateDominationByPriority_attribute_priority(priorities)»
    '''
    
    def generateDominationByPriority_attribute_default(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_attribute_default(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        find effectiveJudgement_attribute_weak(user, source, value, attribute, operation, _access);
    } or {
        «FOR prio: priorities SEPARATOR "\n} or {" »
            find effectiveJudgement_attribute_«prio»(user, source, value, attribute, operation, _access);
        «ENDFOR»
    }
    '''
    
    def generateDominationByPriority_attribute_weak(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_attribute_weak(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        «FOR prio: priorities SEPARATOR "\n} or {" »
            find effectiveJudgement_attribute_«prio»(user, source, value, attribute, operation, _access);
        «ENDFOR»
    }
    '''
    
    def generateDominationByPriority_attribute_priority(TreeSet<Integer> priorities) '''
    «FOR prio: priorities»«IF prio != priorities.maxBy[it]»
    pattern dominationByPriority_attribute_«prio»(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation) 
    {
        «FOR prevailingPrio: priorities.filter[it > prio] SEPARATOR "\n} or {" »
        find effectiveJudgement_attribute_«prevailingPrio»(user, source, value, attribute, operation, _access);
        «ENDFOR»
    } 
    «ENDIF»«ENDFOR»
    '''
    
    
    def generateDominationByPriority_reference(TreeSet<Integer> priorities) '''
    «generateDominationByPriority_reference_default(priorities)»
    
    «generateDominationByPriority_reference_weak(priorities)»
    
    «generateDominationByPriority_reference_priority(priorities)»
    '''
    
    def generateDominationByPriority_reference_default(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_reference_default(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
        find effectiveJudgement_reference_weak(user, source, target, reference, operation, _access);
    } or {
        «FOR prio: priorities SEPARATOR "\n} or {" »
            find effectiveJudgement_reference_«prio»(user, source, target, reference, operation, _access);
        «ENDFOR»
    }
    '''
    
    def generateDominationByPriority_reference_weak(TreeSet<Integer> priorities) '''
    pattern dominationByPriority_reference_weak(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
        «FOR prio: priorities SEPARATOR "\n} or {" »
            find effectiveJudgement_reference_«prio»(user, source, target, reference, operation, _access);
        «ENDFOR»
    }
    '''
    
    def generateDominationByPriority_reference_priority(TreeSet<Integer> priorities) '''
    «FOR prio: priorities»«IF prio != priorities.maxBy[it]»
    pattern dominationByPriority_reference_«prio»(user: java String, source: EObject, target: EObject, reference: EReference, operation) 
    {
        «FOR prevailingPrio: priorities.filter[it > prio] SEPARATOR "\n} or {" »
        find effectiveJudgement_reference_«prevailingPrio»(user, source, target, reference, operation, _access);
        «ENDFOR»
    } 
    «ENDIF»«ENDFOR»
    '''
    
    
    def generateDominationByAccess_object(Model model, TreeSet<Integer> priorities) '''
    «generateDominationByAccess_object_weak(model)»
        
    «generateDominationByAccess_object_priority(model, priorities)»
    '''
    
    def generateDominationByAccess_object_weak(Model model) '''
    pattern dominationByAccess_object_weak(user: java String, object: EObject, operation)
    {
    	«IF model.policy.resolution == ResolutionType.PERMISSIVE»
    	    find judgement_object_weak_allow(user, object, operation);
    	«ENDIF»
    	«IF model.policy.resolution == ResolutionType.RESTRICTIVE»
    	    find judgement_object_weak_deny(user, object, operation);
    	«ENDIF»
    }
    '''
    
    def generateDominationByAccess_object_priority(Model model, TreeSet<Integer> priorities) '''
    «FOR prio : priorities»
    pattern dominationByAccess_object_«prio»(user: java String, object: EObject, operation)
    {
        «IF model.policy.resolution == ResolutionType.PERMISSIVE»
            find judgement_object_«prio»_allow(user, object, operation);
        «ENDIF»
        «IF model.policy.resolution == ResolutionType.RESTRICTIVE»
            find judgement_object_«prio»_deny(user, object, operation);
        «ENDIF»
    }
    «ENDFOR»
    '''
    
    
    def generateDominationByAccess_attribute(Model model, TreeSet<Integer> priorities) '''
    «generateDominationByAccess_attribute_weak(model)»
            
    «generateDominationByAccess_attribute_priority(model, priorities)»
    '''
        
    def generateDominationByAccess_attribute_weak(Model model) '''
    pattern dominationByAccess_attribute_weak(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        «IF model.policy.resolution == ResolutionType.PERMISSIVE»
        	find judgement_attribute_weak_allow(user, source, value, attribute, operation);
        «ENDIF»
        «IF model.policy.resolution == ResolutionType.RESTRICTIVE»
        	find judgement_attribute_weak_deny(user, source, value, attribute, operation);
        «ENDIF»
    }
    '''
        
    def generateDominationByAccess_attribute_priority(Model model, TreeSet<Integer> priorities) '''
    «FOR prio : priorities»
    pattern dominationByAccess_attribute_«prio»(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        «IF model.policy.resolution == ResolutionType.PERMISSIVE»
            find judgement_attribute_«prio»_allow(user, source, value, attribute, operation);
        «ENDIF»
        «IF model.policy.resolution == ResolutionType.RESTRICTIVE»
            find judgement_attribute_«prio»_deny(user, source, value, attribute, operation);
        «ENDIF»
    }
    «ENDFOR»
    '''
    
    
    def generateDominationByAccess_reference(Model model, TreeSet<Integer> priorities) '''
    «generateDominationByAccess_reference_weak(model)»
                
    «generateDominationByAccess_reference_priority(model, priorities)»
    '''
            
    def generateDominationByAccess_reference_weak(Model model) '''
    pattern dominationByAccess_reference_weak(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
        «IF model.policy.resolution == ResolutionType.PERMISSIVE»
            find judgement_reference_weak_allow(user, source, target, reference, operation);
        «ENDIF»
        «IF model.policy.resolution == ResolutionType.RESTRICTIVE»
            find judgement_reference_weak_deny(user, source, target, reference, operation);
        «ENDIF»
    }
    '''
            
    def generateDominationByAccess_reference_priority(Model model, TreeSet<Integer> priorities) '''
    «FOR prio : priorities»
    pattern dominationByAccess_reference_«prio»(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
        «IF model.policy.resolution == ResolutionType.PERMISSIVE»
            find judgement_reference_«prio»_allow(user, source, target, reference, operation);
        «ENDIF»
        «IF model.policy.resolution == ResolutionType.RESTRICTIVE»
            find judgement_reference_«prio»_deny(user, source, target, reference, operation);
        «ENDIF»
    }
    «ENDFOR»
    '''
    

    
    def generateJudgement_object(TreeSet<Integer> priorities) '''
    «generateJudgement_object_weak»
    
    «generateJudgement_object_priority(priorities)»
    '''
    
    def generateJudgement_object_weak() '''
    «generateJudgement_object_weak_allow»
    
    «generateJudgement_object_weak_deny»
    '''
    
    def generateJudgement_object_weak_allow() '''
    pattern judgement_object_weak_allow(user: java String, object: EObject, operation)
    {
        find strongConsequenceJudgement_object_weak_allow(user, object, operation);
    }
    '''
    
    def generateJudgement_object_weak_deny() '''
    pattern judgement_object_weak_deny(user: java String, object: EObject, operation)
    {
        find strongConsequenceJudgement_object_weak_deny(user, object, operation);
    }
    '''
    
    def generateJudgement_object_priority(TreeSet<Integer> priorities) '''
    «FOR prio: priorities»
        «generateJudgement_object_priority_allow(prio)»
        
        «generateJudgement_object_priority_deny(prio)»
    «ENDFOR»
    '''
    
    def generateJudgement_object_priority_allow(Integer prio) '''
    pattern judgement_object_«prio»_allow(user: java String, object: EObject, operation)
    {
    	«IF !explicitRulesObjectAllow.empty»
    	find explicitJudgement_object_allow(user, object, operation, «prio»);
    } or {
    	«ENDIF»
    	find strongConsequenceJudgement_object_«prio»_allow(user, object, operation);
    }
    '''
    
    def generateJudgement_object_priority_deny(Integer prio) '''
    pattern judgement_object_«prio»_deny(user: java String, object: EObject, operation)
    {
    	«IF !explicitRulesObjectDeny.empty»
        find explicitJudgement_object_deny(user, object, operation, «prio»);
    } or {
    	«ENDIF»
        find strongConsequenceJudgement_object_«prio»_deny(user, object, operation);
    }
    '''
    
    
    def generateJudgement_attribute(TreeSet<Integer> priorities) '''
    «generateJudgement_attribute_weak»
    
    «generateJudgement_attribute_priority(priorities)»
    '''
    
    def generateJudgement_attribute_weak() '''
    «generateJudgement_attribute_weak_allow»
        
    «generateJudgement_attribute_weak_deny»
    '''
    
    def generateJudgement_attribute_weak_allow() '''
    pattern judgement_attribute_weak_allow(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        find strongConsequenceJudgement_attribute_weak_allow(user, source, value, attribute, operation);
    } or {
        find weakConsequenceJudgement_attribute_allow(user, source, value, attribute, operation);
    }
    '''
    
    def generateJudgement_attribute_weak_deny() '''
    pattern judgement_attribute_weak_deny(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        find strongConsequenceJudgement_attribute_weak_deny(user, source, value, attribute, operation);
    } or {
        find weakConsequenceJudgement_attribute_deny(user, source, value, attribute, operation);
    }
    '''
    
    def generateJudgement_attribute_priority(TreeSet<Integer> priorities) '''
    «FOR prio: priorities»
        «generateJudgement_attribute_priority_allow(prio)»
            
        «generateJudgement_attribute_priority_deny(prio)»
    «ENDFOR»
    '''
    
    def generateJudgement_attribute_priority_allow(Integer prio) '''
    pattern judgement_attribute_«prio»_allow(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
    	«IF !explicitRulesAttributeAllow.empty»
    	find explicitJudgement_attribute_allow(user, source, value, attribute, operation, «prio»);
    } or {
    	«ENDIF»
    	find strongConsequenceJudgement_attribute_«prio»_allow(user, source, value, attribute, operation);
    }
    '''
    
    def generateJudgement_attribute_priority_deny(Integer prio) '''
    pattern judgement_attribute_«prio»_deny(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
    	«IF !explicitRulesAttributeDeny.empty»
        find explicitJudgement_attribute_deny(user, source, value, attribute, operation, «prio»);
    } or {
    	«ENDIF»
        find strongConsequenceJudgement_attribute_«prio»_deny(user, source, value, attribute, operation);
    }
    '''
    
    
    def generateJudgement_reference(TreeSet<Integer> priorities) '''
    «generateJudgement_reference_weak»
    
    «generateJudgement_reference_priority(priorities)»
    '''
    
    def generateJudgement_reference_weak() '''
    «generateJudgement_reference_weak_allow»
            
    «generateJudgement_reference_weak_deny»
    '''
    
    def generateJudgement_reference_weak_allow() '''
    pattern judgement_reference_weak_allow(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
        find strongConsequenceJudgement_reference_weak_allow(user, source, target, reference, operation);
    } or {
        find weakConsequenceJudgement_reference_allow(user, source, target, reference, operation);
    }
    '''
    
    def generateJudgement_reference_weak_deny() '''
    pattern judgement_reference_weak_deny(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
        find strongConsequenceJudgement_reference_weak_deny(user, source, target, reference, operation);
    } or {
        find weakConsequenceJudgement_reference_deny(user, source, target, reference, operation);
    }
    '''
    
    def generateJudgement_reference_priority(TreeSet<Integer> priorities) '''
    «FOR prio: priorities»
        «generateJudgement_reference_priority_allow(prio)»
            
        «generateJudgement_reference_priority_deny(prio)»
    «ENDFOR»
    '''

    def generateJudgement_reference_priority_allow(Integer prio) '''
    pattern judgement_reference_«prio»_allow(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
    	«IF !explicitRulesReferenceAllow.empty»
    	find explicitJudgement_reference_allow(user, source, target, reference, operation, «prio»);
    } or {
    	«ENDIF»
    	find strongConsequenceJudgement_reference_«prio»_allow(user, source, target, reference, operation);
    }
    '''
    
    def generateJudgement_reference_priority_deny(Integer prio) '''
    pattern judgement_reference_«prio»_deny(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
    	«IF !explicitRulesReferenceDeny.empty»
        find explicitJudgement_reference_deny(user, source, target, reference, operation, «prio»);
    } or {
    	«ENDIF»
        find strongConsequenceJudgement_reference_«prio»_deny(user, source, target, reference, operation);
    }
    '''
    
    
    
    def generateStrongConsequenceJudgement_object(TreeSet<Integer> priorities) '''
    «generateStrongConsequenceJudgement_object_weak»
    
    «generateStrongConsequenceJudgement_object_priority(priorities)»
    '''
    
    def generateStrongConsequenceJudgement_object_weak() '''
    «generateStrongConsequenceJudgement_object_weak_allow»
    
    «generateStrongConsequenceJudgement_object_weak_deny»
    '''
    
    def generateStrongConsequenceJudgement_object_weak_allow() '''
    pattern strongConsequenceJudgement_object_weak_allow(user: java String, object: EObject, operation)
    {
        // object W -> object R
        find effectiveJudgement_object_weak_allow(user, object, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
    	// child R -> parent R
    	find effectiveJudgement_object_weak_allow(user, child, OperationType::READ);
    	find contains(object, child);
    	operation == OperationType::READ;
    } or {
    	// attribute R -> source R
    	find effectiveJudgement_attribute_weak_allow(user, object, _value, _attribute, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// reference R -> source R
    	find effectiveJudgement_reference_weak_allow(user, object, _target, _reference, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// reference R -> target R
    	find effectiveJudgement_reference_weak_allow(user, _source, object, _reference, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// containment reference W -> target W
    	find effectiveJudgement_reference_weak_allow(user, anySource, object, anyReference, OperationType::WRITE);
    	find containmentReference(anySource, object, anyReference);
    	operation == OperationType::WRITE;
    }
    '''
    
    def generateStrongConsequenceJudgement_object_weak_deny() '''
    pattern strongConsequenceJudgement_object_weak_deny(user: java String, object: EObject, operation)
    {
        // object !R -> object !W
        find effectiveJudgement_object_weak_deny(user, object, OperationType::READ);
        operation == OperationType::WRITE;
    } or {
        // ID attribute !R -> source !R
        find effectiveJudgement_attribute_weak_deny(user, object, anyValue, anyAttribute, OperationType::READ);
        find idAttribute(object, anyValue, anyAttribute);
        operation == OperationType::READ;
    } or {
        // deny R, containment reference -> target
        find effectiveJudgement_reference_weak_deny(user, anySource, object, anyReference, OperationType::READ);
        find containmentReference(anySource, object, anyReference);
        operation == OperationType::READ;
    }
    '''
    
    def generateStrongConsequenceJudgement_object_priority(TreeSet<Integer> priorities) '''
    «FOR prio: priorities»
    «generateStrongConsequenceJudgement_object_priority_allow(prio)»
    
    «generateStrongConsequenceJudgement_object_priority_deny(prio)»
    «ENDFOR»
    '''
    
    def generateStrongConsequenceJudgement_object_priority_allow(Integer prio) '''
    pattern strongConsequenceJudgement_object_«prio»_allow(user: java String, object: EObject, operation)
    {
        // object W -> object R
        find effectiveJudgement_object_«prio»_allow(user, object, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
    	// child R -> parent R
    	find effectiveJudgement_object_«prio»_allow(user, child, OperationType::READ);
    	find contains(object, child);
    	operation == OperationType::READ;
    } or {
    	// attribute R -> source R
    	find effectiveJudgement_attribute_«prio»_allow(user, object, _value, _attribute, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// reference R -> source R
    	find effectiveJudgement_reference_«prio»_allow(user, object, _target, _reference, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// reference R -> target R
    	find effectiveJudgement_reference_«prio»_allow(user, _source, object, _reference, OperationType::READ);
    	operation == OperationType::READ;
    } or {
    	// containment reference W -> target W
    	find effectiveJudgement_reference_«prio»_allow(user, anySource, object, anyReference, OperationType::WRITE);
    	find containmentReference(anySource, object, anyReference);
    	operation == OperationType::WRITE;
    }
    '''
    
    def generateStrongConsequenceJudgement_object_priority_deny(Integer prio) '''
    pattern strongConsequenceJudgement_object_«prio»_deny(user: java String, object: EObject, operation)
    {
        // object !R -> object !W
        find effectiveJudgement_object_«prio»_deny(user, object, OperationType::READ);
        operation == OperationType::WRITE;
    } or {
        // ID attribute !R -> source !R
        find effectiveJudgement_attribute_«prio»_deny(user, object, anyValue, anyAttribute, OperationType::READ);
        find idAttribute(object, anyValue, anyAttribute);
        operation == OperationType::READ;
    } or {
        // deny R, containment reference -> target
        find effectiveJudgement_reference_«prio»_deny(user, anySource, object, anyReference, OperationType::READ);
        find containmentReference(anySource, object, anyReference);
        operation == OperationType::READ;
    }
    '''
    
    def generateStrongConsequenceJudgement_attribute(TreeSet<Integer> priorities) '''
    «generateStrongConsequenceJudgement_attribute_weak»
        
    «generateStrongConsequenceJudgement_attribute_priority(priorities)»
    '''
    
    def generateStrongConsequenceJudgement_attribute_weak() '''
    «generateStrongConsequenceJudgement_attribute_weak_allow»
    
    «generateStrongConsequenceJudgement_attribute_weak_deny»
    '''
    
    def generateStrongConsequenceJudgement_attribute_weak_allow() '''
    pattern strongConsequenceJudgement_attribute_weak_allow(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        // allow R, attribute W -> attribute R
        find effectiveJudgement_attribute_weak_allow(user, source, value, attribute, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
    	// object R -> ID attribute R
    	find effectiveJudgement_object_weak_allow(user, source, OperationType::READ);
    	find idAttribute(source, value, attribute);
    	operation == OperationType::READ;
    }
    '''
    
    def generateStrongConsequenceJudgement_attribute_weak_deny() '''
    pattern strongConsequenceJudgement_attribute_weak_deny(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
    	// attribute !R -> attribute !W
    	find effectiveJudgement_attribute_weak_deny(user, source, value, attribute, OperationType::READ);
    	operation == OperationType::WRITE;
    } or {
    	// containment reference !W -> attribute !W
    	find effectiveJudgement_reference_weak_deny(user, anySource, source, anyReference, OperationType::WRITE);
    	find containmentReference(anySource, source, anyReference);
    	find attributeAsset(source, value, attribute);
    	operation == OperationType::WRITE;
    }
    '''
    
    def generateStrongConsequenceJudgement_attribute_priority(TreeSet<Integer> priorities) '''
    «FOR prio: priorities»
    «generateStrongConsequenceJudgement_attribute_priority_allow(prio)»
    
    «generateStrongConsequenceJudgement_attribute_priority_deny(prio)»
    «ENDFOR»
    '''
    
    def generateStrongConsequenceJudgement_attribute_priority_allow(Integer prio) '''
    pattern strongConsequenceJudgement_attribute_«prio»_allow(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        // allow R, attribute W -> attribute R
        find effectiveJudgement_attribute_«prio»_allow(user, source, value, attribute, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
    	// object R -> ID attribute R
    	find effectiveJudgement_object_«prio»_allow(user, source, OperationType::READ);
    	find idAttribute(source, value, attribute);
    	operation == OperationType::READ;
    }
    '''
    
    def generateStrongConsequenceJudgement_attribute_priority_deny(Integer prio) '''
    pattern strongConsequenceJudgement_attribute_«prio»_deny(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
    	// attribute !R -> attribute !W
    	find effectiveJudgement_attribute_«prio»_deny(user, source, value, attribute, OperationType::READ);
    	operation == OperationType::WRITE;
    } or {
    	// containment reference !W -> attribute !W
    	find effectiveJudgement_reference_«prio»_deny(user, anySource, source, anyReference, OperationType::WRITE);
    	find containmentReference(anySource, source, anyReference);
    	find attributeAsset(source, value, attribute);
    	operation == OperationType::WRITE;
    }
    '''
    
    
    def generateStrongConsequenceJudgement_reference(TreeSet<Integer> priorities) '''
    «generateStrongConsequenceJudgement_reference_weak»
        
    «generateStrongConsequenceJudgement_reference_priority(priorities)»
    '''
    
    def generateStrongConsequenceJudgement_reference_weak() '''
    «generateStrongConsequenceJudgement_reference_weak_allow»
    
    «generateStrongConsequenceJudgement_reference_weak_deny»
    '''
    
    def generateStrongConsequenceJudgement_reference_weak_allow() '''
    pattern strongConsequenceJudgement_reference_weak_allow(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
        // reference W -> reference R
        find effectiveJudgement_reference_weak_allow(user, source, target, reference, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
    	// object R -> containment reference R
    	find effectiveJudgement_object_weak_allow(user, target, OperationType::READ);
    	find containmentReference(source, target, reference);
    	operation == OperationType::READ;
    } or {
    	// object W -> containment reference W
        find effectiveJudgement_object_weak_allow(user, target, OperationType::WRITE);
    	find containmentReference(source, target, reference);
    	operation == OperationType::WRITE;
    }
    '''
    
    def generateStrongConsequenceJudgement_reference_weak_deny() '''
    pattern strongConsequenceJudgement_reference_weak_deny(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
    	// reference !R -> reference !W
    	find effectiveJudgement_reference_weak_deny(user, source, target, reference, OperationType::READ);
    	operation == OperationType::WRITE;
    } or {
    	// object !R -> incoming reference !R
    	find effectiveJudgement_object_weak_deny(user, target, OperationType::READ);
    	find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    } or {
    	// object !R -> outgoing reference !R
    	find effectiveJudgement_object_weak_deny(user, source, OperationType::READ);
    	find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    } or {
    	// ID attribute !R -> source !R
    	find effectiveJudgement_attribute_weak_deny(user, target, anyValue, anyAttribute, OperationType::READ);
    	find idAttribute(target, anyValue, anyAttribute);
        find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    }
    '''
    
    def generateStrongConsequenceJudgement_reference_priority(TreeSet<Integer> priorities) '''
    «FOR prio: priorities»
    «generateStrongConsequenceJudgement_reference_priority_allow(prio)»
    
    «generateStrongConsequenceJudgement_reference_priority_deny(prio)»
    «ENDFOR»
    '''
    
    def generateStrongConsequenceJudgement_reference_priority_allow(Integer prio) '''
    pattern strongConsequenceJudgement_reference_«prio»_allow(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
        // reference W -> reference R
        find effectiveJudgement_reference_«prio»_allow(user, source, target, reference, OperationType::WRITE);
        operation == OperationType::READ;
    } or {
    	// object R -> containment reference R
    	find effectiveJudgement_object_«prio»_allow(user, target, OperationType::READ);
    	find containmentReference(source, target, reference);
    	operation == OperationType::READ;
    } or {
    	// object W -> containment reference W
        find effectiveJudgement_object_«prio»_allow(user, target, OperationType::WRITE);
    	find containmentReference(source, target, reference);
    	operation == OperationType::WRITE;
    }
    '''
    
    def generateStrongConsequenceJudgement_reference_priority_deny(Integer prio) '''
    pattern strongConsequenceJudgement_reference_«prio»_deny(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
    	// reference !R -> reference !W
    	find effectiveJudgement_reference_«prio»_deny(user, source, target, reference, OperationType::READ);
    	operation == OperationType::WRITE;
    } or {
    	// object !R -> incoming reference !R
    	find effectiveJudgement_object_«prio»_deny(user, target, OperationType::READ);
    	find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    } or {
    	// object !R -> outgoing reference !R
    	find effectiveJudgement_object_«prio»_deny(user, source, OperationType::READ);
    	find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    } or {
    	// ID attribute !R -> source !R
    	find effectiveJudgement_attribute_«prio»_deny(user, target, anyValue, anyAttribute, OperationType::READ);
    	find idAttribute(target, anyValue, anyAttribute);
        find referenceAsset(source, target, reference);
    	operation == OperationType::READ;
    }
    '''
    
    
    def generateWeakConsequenceJudgement_attribute(TreeSet<Integer> priorities) '''
    «generateWeakConsequenceJudgement_attribute_allow(priorities)»
    
    «generateWeakConsequenceJudgement_attribute_deny(priorities)»
    '''
    
    def generateWeakConsequenceJudgement_attribute_allow(TreeSet<Integer> priorities) '''
    pattern weakConsequenceJudgement_attribute_allow(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
    	find effectiveJudgement_object_weak_allow(user, source, operation);
    	find attributeAsset(source, value, attribute);
    } or {
        «FOR prio : priorities SEPARATOR "\n} or {"»
        find effectiveJudgement_object_«prio»_allow(user, source, operation);
        find attributeAsset(source, value, attribute);
        «ENDFOR»
    }
    '''
    
    def generateWeakConsequenceJudgement_attribute_deny(TreeSet<Integer> priorities) '''
    pattern weakConsequenceJudgement_attribute_deny(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation)
    {
        find effectiveJudgement_object_weak_deny(user, source, operation);
        find attributeAsset(source, value, attribute);
    } or {
        «FOR prio : priorities SEPARATOR "\n} or {"»
        find effectiveJudgement_object_«prio»_deny(user, source, operation);
        find attributeAsset(source, value, attribute);
        «ENDFOR»
    }
    '''
    
    
    def generateWeakConsequenceJudgement_reference(TreeSet<Integer> priorities) '''
    «generateWeakConsequenceJudgement_reference_allow(priorities)»
        
    «generateWeakConsequenceJudgement_reference_deny(priorities)»
    '''
    
    def generateWeakConsequenceJudgement_reference_allow(TreeSet<Integer> priorities) '''
    pattern weakConsequenceJudgement_reference_allow(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
    	find effectiveJudgement_object_weak_allow(user, source, operation);
    	find referenceAsset(source, target, reference);
    } or {
        «FOR prio : priorities SEPARATOR "\n} or {"»
        find effectiveJudgement_object_«prio»_allow(user, source, operation);
        find referenceAsset(source, target, reference);
        «ENDFOR»
    }
    '''
    
    def generateWeakConsequenceJudgement_reference_deny(TreeSet<Integer> priorities) '''
    pattern weakConsequenceJudgement_reference_deny(user: java String, source: EObject, target: EObject, reference: EReference, operation)
    {
        find effectiveJudgement_object_weak_deny(user, source, operation);
        find referenceAsset(source, target, reference);
    } or {
        «FOR prio : priorities SEPARATOR "\n} or {"»
        find effectiveJudgement_object_«prio»_deny(user, source, operation);
        find referenceAsset(source, target, reference);
        «ENDFOR»
    }
    '''

    def generateOperationType(OperationType operation) '''
        «IF operation == OperationType.READWRITE»
        find readWriteOperation(operation);
        «ENDIF»
        «IF operation == OperationType.READ»
        operation == OperationType::READ;
        «ENDIF»
        «IF operation == OperationType.WRITE»
        operation == OperationType::WRITE;
        «ENDIF»
    '''

    def generateAccessibilityLevel(AccessibilityLevel access) '''
        «IF access == AccessibilityLevel.ALLOW»
        access == AccessibilityLevel::ALLOW;
        «ENDIF»
        «IF access == AccessibilityLevel.OBFUSCATE»
        access == AccessibilityLevel::OBFUSCATE;
        «ENDIF»
        «IF access == AccessibilityLevel.DENY»
        access == AccessibilityLevel::DENY;
        «ENDIF»
    '''
    
    def generateHelperPatterns(Model model) '''
    «generateImport»
    
    pattern readWriteOperation(operation) = {
    	operation == OperationType::READ;
    } or {
    	operation == OperationType::WRITE;
    }
    
    «FOR rule: model.policy.rules SEPARATOR "\n\n" AFTER "\n"»
        «rule.generateAssetHelperPattern»
        «rule.generateUserHelperPattern»
    «ENDFOR»
    
    pattern allUsers(user: java String) {
    	«FOR user: model.roles.usersOfRoleList SEPARATOR "\n} or {"»
    	user == "«user.name»";
    	«ENDFOR»
    }
    '''
    
    def generateAssetHelperPattern(Rule rule) '''
    «IF rule.asset instanceof ObjectFact»
        «val object = rule.asset as ObjectFact»
        pattern «rule.name»Asset(«object.variable.name» : EObject) {
    	    find «rule.pattern.name»(«FOR bind: rule.bindList SEPARATOR ", " AFTER ");"»«bind»«ENDFOR»
        }
    «ENDIF»
    «IF rule.asset instanceof AttributeFact»
        «val attribute = rule.asset as AttributeFact»
        pattern «rule.name»Asset(«attribute.variable.name» : EObject, value: java Object, attribute : EAttribute) {
        	find «rule.pattern.name»(«FOR bind: rule.bindList SEPARATOR ", " AFTER ");"»«bind»«ENDFOR»
        	find attributeAsset(«attribute.variable.name», value, attribute);
        	EAttribute.name(attribute, "«attribute.attribute.name»");
        }
    «ENDIF»
    «IF rule.asset instanceof ReferenceFact»
        «val reference = rule.asset as ReferenceFact»
        pattern «rule.name»Asset(«reference.sourceVar» : EObject, «reference.targetVar» : EObject, reference : EReference) {
            find «rule.pattern.name»(«FOR bind: rule.bindList SEPARATOR ", " AFTER ");"»«bind»«ENDFOR»
            find attributeAsset(«reference.sourceVar», «reference.targetVar», reference);
            EReference.name(reference, "«reference.reference.name»");
        }
    «ENDIF»
    '''
    
    def generateUserHelperPattern(Rule rule) '''
    pattern «rule.name»User(user: java String) {
    	«FOR user: rule.roles.usersOfRoleList SEPARATOR "\n} or {" AFTER "}"»
    	user == "«user.name»";
    	«ENDFOR»
    '''

    def getBindList(Rule rule) {
		val bindList = new ArrayList<Object>();
		for (Variable parameter : rule.pattern.parameters) {
			bindList.add(getBindValue(parameter, rule));
		}
		return bindList;
	}
	
	def getBindValue(Variable parameter, Rule rule) {
		for(Binding binding : rule.bindings) {
			if(binding.variable.equals(parameter)){
				if(binding.bind.valueString !== null) {
					return binding.bind.valueString;
				} else {
					return binding.bind.valueInteger;
				}
			}
		}
		if(rule.asset instanceof ObjectFact) {
			val objectAsset = rule.asset as ObjectFact;
			if(objectAsset.variable.equals(parameter)) {
				return objectAsset.variable.name;
			}
		}
		if(rule.asset instanceof AttributeFact) {
			val attributeAsset = rule.asset as AttributeFact;
			if(attributeAsset.variable.equals(parameter)) {
				return attributeAsset.variable.name;
			}
		}
		if(rule.asset instanceof ReferenceFact) {
			val referenceAsset = rule.asset as ReferenceFact;
			if(referenceAsset.sourceVar.equals(parameter)) {
				return referenceAsset.sourceVar.name;
			}
			if(referenceAsset.targetVar.equals(parameter)) {
				return referenceAsset.targetVar.name;
			}
		}
		return "_";
	}
	
	def getUsersOfRoleList(List<Role> roles) {
		val userList = new ArrayList<User>();
		for (Role role : roles) {
			if(role instanceof User) {
				userList.add(role as User);
			} else {
				for (user : getUsersOfGroup(role as Group)) {
					userList.add(user);
				}
			}
		}
		return userList;
	}
	
	def List<User> getUsersOfGroup(Group group){
		val userList = new ArrayList<User>();
		for (role : group.roles) {
			if(role instanceof User){
			    userList.add(role as User);
			} else {
				userList.addAll(getUsersOfGroup(role as Group));
			}
		}
		return userList;
	}
	
	def getPriorities(Model model) {
		val priorities = new TreeSet<Integer>();
		for(rule : model.policy.rules) {
			priorities.add(rule.priority);
		}
		return priorities;
	}
	
	def generateMetaModelPattern(EPackage metamodel) '''
        «generateImport»

        «metamodel.generateAttributeAssetPattern»

        «metamodel.generateReferenceAssetPattern»

        «generateContainmentReferencePattern»

        «generateIdAttributePattern»

        «metamodel.generateContainsPattern»

        «metamodel.generateObjectAssetPattern»

        «metamodel.generateRootPattern»

        «generateObjectAssetWithoutRootPattern»
    '''

    def generateAttributeAssetPattern(EPackage metamodel)'''
pattern attributeAsset(source : EObject, value: java Object, attribute : EAttribute) {
	«FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | !x.EAttributes.empty) SEPARATOR "\n} or {"»
		«FOR attribute : eClass.EAttributes SEPARATOR "\n} or {"»
		    find attributeAsset«eClass.name»«attribute.name»(source, value, attribute);
		«ENDFOR»
    «ENDFOR»
}

«FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | !x.EAttributes.empty) SEPARATOR "\n"»
    «generateAttributeConstraints(eClass)»
«ENDFOR»
	'''
	
	def generateReferenceAssetPattern(EPackage metamodel)'''
pattern referenceAsset(source : EObject, target : EObject, reference : EReference) {
	«FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | !x.EReferences.empty) SEPARATOR "\n} or {"»
		«FOR reference : eClass.EReferences SEPARATOR "\n} or {"»
		   find referenceAsset«eClass.name»«reference.name»(source, target, reference);     
	    «ENDFOR»
	«ENDFOR»
}

«FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | !x.EReferences.empty) SEPARATOR "\n"»
    «generateReferenceConstraints(eClass)»
«ENDFOR»
	'''

    def generateContainmentReferencePattern()'''
pattern containmentReference(source : EObject, target : EObject, reference : EReference) {
	find referenceAsset(source, target, reference);
	EReference.containment(reference, true);
}
	'''

    def generateIdAttributePattern()'''
pattern idAttribute(source:EObject, value: java Object, attribute:EAttribute) {
	find attributeAsset(source, value, attribute);
	EAttribute.iD(attribute, true);
}
	'''

    def generateContainsPattern(EPackage metamodel)'''
pattern contains(container: EObject, contained: EObject) {
	«FOR eClass : metamodel.EClassifiers.filter(EClass).filter(x | x.EReferences.exists[y | y.containment]) SEPARATOR "\n} or {"»
		«FOR eReference : eClass.EReferences.filter[x | x.isContainment] SEPARATOR "\n} or {"»
		«eClass.name».«eReference.name»(container, contained);
		«ENDFOR»
    «ENDFOR»
}
	'''
	
	def generateObjectAssetPattern(EPackage metamodel)'''
pattern objectAsset(object: EObject) {
	«FOR eClass : metamodel.EClassifiers.filter(EClass) SEPARATOR "\n} or {"»
		«eClass.name»(object);
    «ENDFOR»
}
	'''
	
	def generateRootPattern(EPackage metamodel)'''
pattern root(object: EObject) {
    «metamodel.EClassifiers.filter(EClass).head.name»(object);
}
	'''
	
	def generateObjectAssetWithoutRootPattern()'''
pattern objectAssetWithoutRoot(object: EObject) {
	find objectAsset(object);
	neg find root(object);
}
	'''

    def generateAttributeConstraints(EClass eClass)'''
        «FOR attribute : eClass.EAttributes SEPARATOR "\n"»
pattern attributeAsset«eClass.name»«attribute.name»(source : EObject, value: java Object, attribute : EAttribute)
{
     «eClass.name».«attribute.name»(source, value);
	 EClass.name(class, "«eClass.name»");
	 EClass.eStructuralFeatures(class, attribute);
	 EAttribute.name(attribute, "«attribute.name»");
}
	    «ENDFOR»
	'''
	
	def generateReferenceConstraints(EClass eClass)'''
        «FOR reference : eClass.EReferences SEPARATOR "\n"»
pattern referenceAsset«eClass.name»«reference.name»(source : EObject, target : EObject, reference : EReference)
{
	«eClass.name».«reference.name»(source, target);
	EClass.name(class, "«eClass.name»");
	EClass.eStructuralFeatures(class, reference);
	EReference.name(reference, "«reference.name»");
}
	    «ENDFOR»
	'''
}
