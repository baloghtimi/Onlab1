package org.mondo.collaboration.security.increment.policy
	
import "http://www.eclipse.org/emf/2002/Ecore"
import "http://mondo.org/collaboration/security/increment/vocabulary"

pattern readWriteOperation(operation) = {
	operation == OperationType::READ;
} or {
	operation == OperationType::WRITE;
}

pattern restrictRootAsset(root: EObject) {
	find objectRoot(root);
}

pattern restrictRootUser(user: java String) {
	user == "PrincipalEngineer";
	} or {
	user == "IOManager";
	} or {
	user == "SubsystemManager";
}

pattern enableRootAsset(root: EObject) {
	find objectRoot(root);
}

pattern enableRootUser(user: java String) {
	user == "PrincipalEngineer";
	} or {
	user == "IOManager";
	} or {
	user == "SubsystemManager";
}

pattern enableIOAsset(object: EObject) {
	find objectIO(object);
}

pattern enableIOUser(user: java String) {
	user == "IOManager";
}

pattern restrictNotIOAsset(object: EObject) {
	find objectNotIO(object);
}

pattern restrictNotIOUser(user: java String) {
	user == "IOManager";
}

pattern restrictIOAsset(object: EObject) {
	find objectIO(object);
}

pattern restrictIOUser(user: java String) {
	user == "SubsystemManager";
}

pattern allUsers(user: java String) {
	user == "PrincipalEngineer";
	} or {
	user == "IOManager";
	} or {
	user == "SubsystemManager";
}
pattern explicitJudgement(user: java String, asset: EObject, operation, access, priority: java Integer)
{
	
//  rule restrictRoot
    find restrictRootAsset(asset);
    find restrictRootUser(user);
    operation == OperationType::WRITE;
    access == AccessibilityLevel::DENY;
    priority == 1;

} or {

//  rule enableRoot
    find enableRootAsset(asset);
    find enableRootUser(user);
    operation == OperationType::READ;
    access == AccessibilityLevel::ALLOW;
    priority == 1;

} or {

//  rule enableIO
    find enableIOAsset(asset);
    find enableIOUser(user);
    find readWriteOperation(operation);
    access == AccessibilityLevel::ALLOW;
    priority == 1;

} or {

//  rule restrictNotIO
    find restrictNotIOAsset(asset);
    find restrictNotIOUser(user);
    operation == OperationType::READ;
    access == AccessibilityLevel::DENY;
    priority == 1;

} or {

//  rule restrictIO
    find restrictIOAsset(asset);
    find restrictIOUser(user);
    operation == OperationType::WRITE;
    access == AccessibilityLevel::DENY;
    priority == 1;

} or {

//  rule default
    find objectAllObjects(asset);
    find allUsers(user);
    find readWriteOperation(operation);
    access == AccessibilityLevel::ALLOW;
    priority == 0;
}

pattern effectiveJudgement(user: java String, asset: EObject, operation, access) 
{
	find effectiveJudgement_at_0(user, asset, operation, access);
	} or {
	find effectiveJudgement_at_1(user, asset, operation, access);
}

pattern judgement_at_0(user: java String, asset: EObject, operation, access) 
{
	find explicitJudgement(user, asset, operation, access, 0);
} or {
	find relaxedJudgement_at_0(user, asset, operation, access);
} or {
	find strongConsequence_at_0(user, asset, operation, access, _domAsset, _domOp, _domAccess);
//} or {
//	find weakConsequence_at_0_of_0(user, asset, operation, access, _domAsset, _domOp, _domAccess);
//} or {
//	find weakConsequence_at_0_of_1(user, asset, operation, access, _domAsset, _domOp, _domAccess);
}
pattern judgement_at_1(user: java String, asset: EObject, operation, access) 
{
	find explicitJudgement(user, asset, operation, access, 1);
} or {
	find strongConsequence_at_1(user, asset, operation, access, _domAsset, _domOp, _domAccess);
//} or {
//	find weakConsequence_at_1_of_1(user, asset, operation, access, _domAsset, _domOp, _domAccess);
}

pattern relaxedJudgement_at_0(user: java String, asset: EObject, operation, access)
{
	find judgement_at_0(user, asset, operation, dominatedAccess);
	find domination_of_0(user, asset, operation, _dominatedAccess, access);
}

pattern effectiveJudgement_at_0(user: java String, asset: EObject, operation, access) 
{
	find judgement_at_0(user, asset, operation, access);
	neg find domination_of_0(user, asset, operation, access, _prevailingAccess);
} 
pattern effectiveJudgement_at_1(user: java String, asset: EObject, operation, access) 
{
	find judgement_at_1(user, asset, operation, access);
} 

pattern domination_of_0(user: java String, asset: EObject, operation, dominatedAccess, prevailingAccess) 
{
	find domination_by_1(user, asset, operation, dominatedAccess, prevailingAccess);
} 

pattern domination_by_1(user: java String, asset: EObject, operation, dominatedAccess, prevailingAccess) 
{
	find effectiveJudgement_at_1(user, asset, operation, prevailingAccess);
	find resolution(dominatedAccess, prevailingAccess);
}  

pattern resolution(dominatedAccess, prevailingAccess)
{
	dominatedAccess == AccessibilityLevel::ALLOW;
	prevailingAccess == AccessibilityLevel::DENY;
}

pattern strongConsequence_at_0(user: java String,
	depAsset: EObject, depOp, depAccess, 
	domAsset: EObject, domOp, domAccess) 
{
	// type II, read vs write
	find effectiveJudgement_at_0(user, domAsset, domOp, domAccess);
	depAsset == domAsset;
	domOp == OperationType::WRITE; depOp == OperationType::READ;
	domAccess == AccessibilityLevel::ALLOW; depAccess == AccessibilityLevel::ALLOW; 
} or {
	// type II, read vs write
	find effectiveJudgement_at_0(user, domAsset, domOp, domAccess);
	depAsset == domAsset;
	domOp == OperationType::READ; depOp == OperationType::WRITE;
	domAccess == AccessibilityLevel::DENY; depAccess == AccessibilityLevel::DENY; 
} or {
	// type III, read vs containment
	find effectiveJudgement_at_0(user, domAsset, domOp, domAccess);
	find contains(depAsset, domAsset);
	domOp == OperationType::READ; depOp == OperationType::READ;
	domAccess == AccessibilityLevel::ALLOW; depAccess == AccessibilityLevel::ALLOW; 
} or {
	// type III, read vs containment
	find effectiveJudgement_at_0(user, domAsset, domOp, domAccess);
	find contains(domAsset, depAsset);
	domOp == OperationType::READ; depOp == OperationType::READ;
	domAccess == AccessibilityLevel::DENY; depAccess == AccessibilityLevel::DENY; 
}
pattern strongConsequence_at_1(user: java String,
	depAsset: EObject, depOp, depAccess, 
	domAsset: EObject, domOp, domAccess) 
{
	// type II, read vs write
	find effectiveJudgement_at_1(user, domAsset, domOp, domAccess);
	depAsset == domAsset;
	domOp == OperationType::WRITE; depOp == OperationType::READ;
	domAccess == AccessibilityLevel::ALLOW; depAccess == AccessibilityLevel::ALLOW; 
} or {
	// type II, read vs write
	find effectiveJudgement_at_1(user, domAsset, domOp, domAccess);
	depAsset == domAsset;
	domOp == OperationType::READ; depOp == OperationType::WRITE;
	domAccess == AccessibilityLevel::DENY; depAccess == AccessibilityLevel::DENY; 
} or {
	// type III, read vs containment
	find effectiveJudgement_at_1(user, domAsset, domOp, domAccess);
	find contains(depAsset, domAsset);
	domOp == OperationType::READ; depOp == OperationType::READ;
	domAccess == AccessibilityLevel::ALLOW; depAccess == AccessibilityLevel::ALLOW; 
} or {
	// type III, read vs containment
	find effectiveJudgement_at_1(user, domAsset, domOp, domAccess);
	find contains(domAsset, depAsset);
	domOp == OperationType::READ; depOp == OperationType::READ;
	domAccess == AccessibilityLevel::DENY; depAccess == AccessibilityLevel::DENY; 
}

//pattern weakConsequence(user: java String,
//	depAsset: EObject, depOp: java SecurityOperation, depBound: java Enumerator, 
//	dir: java BoundDirection, depPrio: java Integer,
//	domAsset: EObject, domOp: java SecurityOperation, domBound: java Enumerator,
//	domPrio: java Integer) 
//{
//	depPrio == 1;
//	// TODO implement; not needed for example
//}
