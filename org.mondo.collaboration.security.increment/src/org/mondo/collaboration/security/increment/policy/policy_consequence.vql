package org.mondo.collaboration.security.increment.policy

import "http://www.eclipse.org/emf/2002/Ecore"
import "http://www.mondo.org/collaboration/policy/Rules"
import "http://WTSpec4M/5.0M"

pattern strongConsequenceOnObject_at_1(user: java String, object: EObject, operation, access)
{
	// allow W -> allow R, object -> object
	find effectiveJudgementOnObject_at_1(user, object, OperationType::WRITE, AccessibilityLevel::ALLOW);
	operation == OperationType::READ;
	access == AccessibilityLevel::ALLOW;
} or {
	// deny R -> deny W, object -> object
	find effectiveJudgementOnObject_at_1(user, object, OperationType::READ, AccessibilityLevel::DENY);
	operation == OperationType::WRITE;
	access == AccessibilityLevel::DENY;
} or {
	// allow R -> obfuscate R, child -> parent
	find effectiveJudgementOnObject_at_1(user, child, OperationType::READ, AccessibilityLevel::ALLOW);
	find contains(object, child);
	neg find effectiveJudgementOnObject_at_1(user, object, OperationType::READ, AccessibilityLevel::ALLOW);
	operation == OperationType::READ;
	access == AccessibilityLevel::OBFUSCATE;
} or {
	// allow R -> obfuscate R, attribute -> source
	find effectiveJudgementOnAttribute_at_1(user, object, _value, _attribute, OperationType::READ, AccessibilityLevel::ALLOW);
	neg find effectiveJudgementOnObject_at_1(user, object, OperationType::READ, AccessibilityLevel::ALLOW);
	operation == OperationType::READ;
	access == AccessibilityLevel::OBFUSCATE;
} or {
    // deny R, ID attribute -> source
    find effectiveJudgementOnAttribute_at_1(user, object, anyValue, anyAttribute, OperationType::READ, AccessibilityLevel::DENY);
    find idAttribute(object, anyValue, anyAttribute);
    operation == OperationType::READ;
    access == AccessibilityLevel::DENY;
} or {
    // allow R -> obfuscate R, reference -> source
    find effectiveJudgementOnReference_at_1(user, object, _target, _reference, OperationType::READ, AccessibilityLevel::ALLOW);
    neg find effectiveJudgementOnObject_at_1(user, object, OperationType::READ, AccessibilityLevel::ALLOW);
    operation == OperationType::READ;
    access == AccessibilityLevel::OBFUSCATE;
} or {
    // allow R -> obfuscate R, reference -> target
    find effectiveJudgementOnReference_at_1(user, _source, object, _reference, OperationType::READ, AccessibilityLevel::ALLOW);
    neg find effectiveJudgementOnObject_at_1(user, object, OperationType::READ, AccessibilityLevel::ALLOW);
    operation == OperationType::READ;
    access == AccessibilityLevel::OBFUSCATE;
} or {
    // deny R, containment reference -> target
    find effectiveJudgementOnReference_at_1(user, anySource, object, anyReference, OperationType::READ, AccessibilityLevel::DENY);
    find containmentReference(anySource, object, anyReference);
    operation == OperationType::READ;
    access == AccessibilityLevel::DENY;
} or {
    // allow W, containment reference -> target
    find effectiveJudgementOnReference_at_1(user, anySource, object, anyReference, OperationType::WRITE, AccessibilityLevel::ALLOW);
    find containmentReference(anySource, object, anyReference);
    operation == OperationType::WRITE;
    access == AccessibilityLevel::ALLOW;
}

pattern strongConsequenceOnAttribute_at_1(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation, access)
{
	// allow W -> allow R, attribute -> attribute
	find effectiveJudgementOnAttribute_at_1(user, source, value, attribute, OperationType::WRITE, AccessibilityLevel::ALLOW);
	operation == OperationType::READ;
	access == AccessibilityLevel::ALLOW;
} or {
	// deny R -> deny W, attribute -> attribute
	find effectiveJudgementOnAttribute_at_1(user, source, value, attribute, OperationType::READ, AccessibilityLevel::DENY);
	operation == OperationType::WRITE;
	access == AccessibilityLevel::DENY;
} or {
    // allow R, object -> ID attribute
    find effectiveJudgementOnObject_at_1(user, source, OperationType::READ, AccessibilityLevel::ALLOW);
    find idAttribute(source, value, attribute);
    operation == OperationType::READ;
    access == AccessibilityLevel::ALLOW;
} or {
    // deny W, containment reference -> attribute
    find effectiveJudgementOnReference_at_1(user, anySource, source, anyReference, OperationType::WRITE, AccessibilityLevel::ALLOW);
    find containmentReference(anySource, source, anyReference);
    find attributeAsset(source, value, attribute);
    operation == OperationType::WRITE;
    access == AccessibilityLevel::ALLOW;
} or {
	// obfuscate R, object -> ID attribute
	find effectiveJudgementOnObject_at_1(user, source, OperationType::READ, AccessibilityLevel::OBFUSCATE);
	find idAttribute(source, value, attribute);
	operation == OperationType::READ;
	access == AccessibilityLevel::OBFUSCATE;
} or {
    // obfuscate R -> deny R, object -> nonID attribute
    find effectiveJudgementOnObject_at_1(user, source, OperationType::READ, AccessibilityLevel::OBFUSCATE);
    find attributeAsset(source, value, attribute);
    neg find idAttribute(source, value, attribute);
    operation == OperationType::READ;
    access == AccessibilityLevel::DENY;
}

pattern strongConsequenceOnReference_at_1(user: java String, source: EObject, target: EObject, reference: EReference, operation, access)
{
	// allow W -> allow R, reference -> reference
	find effectiveJudgementOnReference_at_1(user, source, target, reference, OperationType::WRITE, AccessibilityLevel::ALLOW);
	operation == OperationType::READ;
	access == AccessibilityLevel::ALLOW;
} or {
	// deny R -> deny W, reference -> reference
	find effectiveJudgementOnReference_at_1(user, source, target, reference, OperationType::READ, AccessibilityLevel::DENY);
	operation == OperationType::WRITE;
	access == AccessibilityLevel::DENY;
} or {
    // allow R, object -> container reference
    find effectiveJudgementOnObject_at_1(user, target, OperationType::READ, AccessibilityLevel::ALLOW);
    find containmentReference(source, target, reference);
    operation == OperationType::READ;
    access == AccessibilityLevel::ALLOW;
} or {
    // deny R, object -> incoming reference
    find effectiveJudgementOnObject_at_1(user, target, OperationType::READ, AccessibilityLevel::DENY);
    find referenceAsset(source, target, reference);
    operation == OperationType::READ;
    access == AccessibilityLevel::DENY;
} or {
    // deny R, object -> outgoing reference
    find effectiveJudgementOnObject_at_1(user, source, OperationType::READ, AccessibilityLevel::DENY);
    find referenceAsset(source, target, reference);
    operation == OperationType::READ;
    access == AccessibilityLevel::DENY;
} or {
    // allow W, object -> container reference
    find effectiveJudgementOnObject_at_1(user, target, OperationType::WRITE, AccessibilityLevel::ALLOW);
    find containmentReference(source, target, reference);
    operation == OperationType::WRITE;
    access == AccessibilityLevel::ALLOW;
} or {
    // deny R, ID attribute -> source
    find effectiveJudgementOnAttribute_at_1(user, target, anyValue, anyAttribute, OperationType::WRITE, AccessibilityLevel::ALLOW);
    find idAttribute(target, anyValue, anyAttribute);
    find referenceAsset(source, target, reference);
    operation == OperationType::WRITE;
    access == AccessibilityLevel::ALLOW;
}

pattern weakConsequenceOnAttribute(user: java String, source: EObject, value: java Object, attribute: EAttribute, operation, access)
{
	find effectiveJudgementOnObject_at_1(user, source, operation, access);
	find attributeAsset(source, value, attribute);
}
        
pattern weakConsequenceOnReference(user: java String, source: EObject, target: EObject, reference: EReference, operation, access)
{
	find effectiveJudgementOnObject_at_1(user, source, operation, access);
	find referenceAsset(source, target, reference);
}
